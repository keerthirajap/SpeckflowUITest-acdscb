// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace InfinityMatrix.Niraiya.UITests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("05_EndToEndValidation", Description=@"![05_EndToEndValidation]
Link to a feature: [EndToEndValidation](InfinityMatrix.Niraiya.UITests/Features/05_EndToEndValidation.feature)
***Further read***: **[Learn more about how to generate Living Documentation](https://docs.specflow.org/projects/specflow-livingdoc/en/latest/LivingDocGenerator/Generating-Documentation.html)**", SourceFile="Features\\05_EndToEndValidation.feature", SourceLine=0)]
    public partial class _05_EndToEndValidationFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "05_EndToEndValidation.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "05_EndToEndValidation", @"![05_EndToEndValidation]
Link to a feature: [EndToEndValidation](InfinityMatrix.Niraiya.UITests/Features/05_EndToEndValidation.feature)
***Further read***: **[Learn more about how to generate Living Documentation](https://docs.specflow.org/projects/specflow-livingdoc/en/latest/LivingDocGenerator/Generating-Documentation.html)**", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void _05_10EndToEndPositive_NewUserSignUp(string environment, string browser, string device, string pageLoadedInSeconds, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Endtoendpositive",
                    "Sequential"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Environment", environment);
            argumentsOfScenario.Add("Browser", browser);
            argumentsOfScenario.Add("Device", device);
            argumentsOfScenario.Add("PageLoadedInSeconds", pageLoadedInSeconds);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("05_10 End to end positive - New user Sign Up", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 7
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
 testRunner.Given("Get new user details for registration from AppSetting", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 9
 testRunner.And("Clear Database records for new user registration from AppSetting", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 10
 testRunner.And("Clear all the emails from Mail box for \'Email-Box:EmailId\' is \'Email-Box:Password" +
                        "\' from AppSetting", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 11
 testRunner.And(string.Format("Setup the browser {0} for device {1}", browser, device), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 12
 testRunner.And(string.Format("Get and load SignUp page URL to browser from AppSetting \'URLAuth:SignUp-URL\' and " +
                            "page loaded with in {0} seconds", pageLoadedInSeconds), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 13
 testRunner.And("Accept cookie button is clicked in Static Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 14
 testRunner.And("We were able to set the Screen color mode from AppSetting", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 15
 testRunner.And("Local storage value for theme \'theme\' is \'dark\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 16
 testRunner.When("Enter user details from AppSetting to SignUp page and click submit", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 17
 testRunner.Then("Validate SignUp page details in screen for sucessfull response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 18
 testRunner.And("Validate Application auto navigated to Email Pending Verification page from AppSe" +
                        "tting \'URLAuth:EmailIdVerificationPending-URL\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 19
 testRunner.And("Validate latest SignUp Email from Mail box for \'Email-Box:EmailId\' is \'Email-Box:" +
                        "Password\' from AppSetting", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 20
 testRunner.And("Open the email as HTML in new tab and click the activate your account button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 21
 testRunner.And("New tab will be opened and total tab count 3 and navigate to 3rd tab", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 22
 testRunner.And("Validate Email address Verified Successfully page from AppSetting \'URLAuth:EmailV" +
                        "erified-URL\' and content", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 23
 testRunner.And("Validate latest password recovery key Email from Mail box for \'Email-Box:EmailId\'" +
                        " is \'Email-Box:Password\' from AppSetting", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 24
 testRunner.And("Goto 1st tab and close other 3 tabs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 25
 testRunner.And("Open SignIn URL from AppSetting \'URLAuth:SignIn-URL\' and Enter user details from " +
                        "AppSetting and click submit button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 26
 testRunner.And("Validate screen navigated to NiraiyaAccounts page from AppSetting \'URLAuth:Niraiy" +
                        "aAccounts-URL\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 27
 testRunner.And("Click Add Linked Account card and validate popup is opened", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 28
 testRunner.And("Click close button at popup bottom of Add Linked Account popup and validate popup" +
                        " is closed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 29
 testRunner.And("Click Add Linked Account card and validate popup is opened", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 30
 testRunner.And("Click close button at popup top of Add Linked Account popup and validate popup is" +
                        " closed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 31
 testRunner.And("Navigate to LoginAndSecurity via menu bar link and validate LoginAndSecurity page" +
                        " from AppSetting \'URLAuth:LoginAndSecurity-URL\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 32
 testRunner.And("Navigate to NiraiyaAccounts via menu bar link and validate NiraiyaAccounts page f" +
                        "rom AppSetting \'URLAuth:NiraiyaAccounts-URL\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 33
 testRunner.And("Navigate to LoginAndSecurity via menu bar button and validate LoginAndSecurity pa" +
                        "ge from AppSetting \'URLAuth:LoginAndSecurity-URL\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 34
 testRunner.And("Validate LoginAndSecurity page field values from AppSetting", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 35
 testRunner.And("Open Edit User Name popup by click edit button in LoginAndSecurity page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 36
 testRunner.And("Click close Edit User Name popup button and check popup is closed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("05_10 End to end positive - New user Sign Up, chrome-GalaxyS5", new string[] {
                "Endtoendpositive",
                "Sequential"}, SourceLine=39)]
        public virtual void _05_10EndToEndPositive_NewUserSignUp_Chrome_GalaxyS5()
        {
#line 7
this._05_10EndToEndPositive_NewUserSignUp("chrome-GalaxyS5", "chrome", "Galaxy S5", "15", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("05_10 End to end positive - New user Sign Up, chrome-iPhoneX", new string[] {
                "Endtoendpositive",
                "Sequential"}, SourceLine=39)]
        public virtual void _05_10EndToEndPositive_NewUserSignUp_Chrome_IPhoneX()
        {
#line 7
this._05_10EndToEndPositive_NewUserSignUp("chrome-iPhoneX", "chrome", "iPhone X", "15", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("05_10 End to end positive - New user Sign Up, chrome-iPad", new string[] {
                "Endtoendpositive",
                "Sequential"}, SourceLine=39)]
        public virtual void _05_10EndToEndPositive_NewUserSignUp_Chrome_IPad()
        {
#line 7
this._05_10EndToEndPositive_NewUserSignUp("chrome-iPad", "chrome", "iPad", "15", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("05_10 End to end positive - New user Sign Up, chrome-Desktop", new string[] {
                "Endtoendpositive",
                "Sequential"}, SourceLine=39)]
        public virtual void _05_10EndToEndPositive_NewUserSignUp_Chrome_Desktop()
        {
#line 7
this._05_10EndToEndPositive_NewUserSignUp("chrome-Desktop", "chrome", "Desktop", "15", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("05_10 End to end positive - New user Sign Up, firefox-GalaxyS5", new string[] {
                "Endtoendpositive",
                "Sequential"}, SourceLine=39)]
        public virtual void _05_10EndToEndPositive_NewUserSignUp_Firefox_GalaxyS5()
        {
#line 7
this._05_10EndToEndPositive_NewUserSignUp("firefox-GalaxyS5", "firefox", "Galaxy S5", "20", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("05_10 End to end positive - New user Sign Up, firefox-Desktop", new string[] {
                "Endtoendpositive",
                "Sequential"}, SourceLine=39)]
        public virtual void _05_10EndToEndPositive_NewUserSignUp_Firefox_Desktop()
        {
#line 7
this._05_10EndToEndPositive_NewUserSignUp("firefox-Desktop", "firefox", "Desktop", "20", ((string[])(null)));
#line hidden
        }
        
        public virtual void _05_20EndToEndPositive_LoginAndSecurityChangeName(string environment, string browser, string device, string pageLoadedInSeconds, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Sequential"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Environment", environment);
            argumentsOfScenario.Add("Browser", browser);
            argumentsOfScenario.Add("Device", device);
            argumentsOfScenario.Add("PageLoadedInSeconds", pageLoadedInSeconds);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("05_20 End to end positive - Login And Security Change Name", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 48
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 49
 testRunner.Given("Get new user details for registration from AppSetting", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 50
 testRunner.And(string.Format("Setup the browser {0} for device {1}", browser, device), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 51
 testRunner.And(string.Format("Get and load SignUp page URL to browser from AppSetting \'URLAuth:SignUp-URL\' and " +
                            "page loaded with in {0} seconds", pageLoadedInSeconds), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 52
 testRunner.And("Accept cookie button is clicked in Static Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 53
 testRunner.And("We were able to set the Screen color mode from AppSetting", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 54
 testRunner.And("Local storage value for theme \'theme\' is \'dark\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 55
 testRunner.Then("Open SignIn URL from AppSetting \'URLAuth:SignIn-URL\' and Enter user details from " +
                        "AppSetting and click submit button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 56
 testRunner.Then("Validate screen navigated to NiraiyaAccounts page from AppSetting \'URLAuth:Niraiy" +
                        "aAccounts-URL\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 57
 testRunner.And("Navigate to LoginAndSecurity via menu bar link and validate LoginAndSecurity page" +
                        " from AppSetting \'URLAuth:LoginAndSecurity-URL\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 58
 testRunner.And("Validate LoginAndSecurity page field values from AppSetting", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 59
 testRunner.And("Open Edit User Name popup by click edit button in LoginAndSecurity page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 60
 testRunner.And("User name in Edit User Name popup from AppSetting \'NewEmailAccount:ChangeName\' an" +
                        "d click save", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 61
 testRunner.And("Validate screen navigated to Home page from AppSetting", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 62
 testRunner.And("Accept cookie button is clicked in Static Pages", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 63
 testRunner.And("Open SignIn URL from AppSetting \'URLAuth:SignIn-URL\' and Enter user details from " +
                        "AppSetting and click submit button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 64
 testRunner.And("Navigate to LoginAndSecurity via menu bar link and validate LoginAndSecurity page" +
                        " from AppSetting \'URLAuth:LoginAndSecurity-URL\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 65
 testRunner.And("Validate LoginAndSecurity page new field values from AppSetting", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("05_20 End to end positive - Login And Security Change Name, chrome-GalaxyS5", new string[] {
                "Sequential"}, SourceLine=68)]
        public virtual void _05_20EndToEndPositive_LoginAndSecurityChangeName_Chrome_GalaxyS5()
        {
#line 48
this._05_20EndToEndPositive_LoginAndSecurityChangeName("chrome-GalaxyS5", "chrome", "Galaxy S5", "15", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("05_20 End to end positive - Login And Security Change Name, chrome-iPhoneX", new string[] {
                "Sequential"}, SourceLine=68)]
        public virtual void _05_20EndToEndPositive_LoginAndSecurityChangeName_Chrome_IPhoneX()
        {
#line 48
this._05_20EndToEndPositive_LoginAndSecurityChangeName("chrome-iPhoneX", "chrome", "iPhone X", "15", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("05_20 End to end positive - Login And Security Change Name, chrome-iPad", new string[] {
                "Sequential"}, SourceLine=68)]
        public virtual void _05_20EndToEndPositive_LoginAndSecurityChangeName_Chrome_IPad()
        {
#line 48
this._05_20EndToEndPositive_LoginAndSecurityChangeName("chrome-iPad", "chrome", "iPad", "15", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("05_20 End to end positive - Login And Security Change Name, chrome-Desktop", new string[] {
                "Sequential"}, SourceLine=68)]
        public virtual void _05_20EndToEndPositive_LoginAndSecurityChangeName_Chrome_Desktop()
        {
#line 48
this._05_20EndToEndPositive_LoginAndSecurityChangeName("chrome-Desktop", "chrome", "Desktop", "15", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("05_20 End to end positive - Login And Security Change Name, firefox-GalaxyS5", new string[] {
                "Sequential"}, SourceLine=68)]
        public virtual void _05_20EndToEndPositive_LoginAndSecurityChangeName_Firefox_GalaxyS5()
        {
#line 48
this._05_20EndToEndPositive_LoginAndSecurityChangeName("firefox-GalaxyS5", "firefox", "Galaxy S5", "20", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("05_20 End to end positive - Login And Security Change Name, firefox-Desktop", new string[] {
                "Sequential"}, SourceLine=68)]
        public virtual void _05_20EndToEndPositive_LoginAndSecurityChangeName_Firefox_Desktop()
        {
#line 48
this._05_20EndToEndPositive_LoginAndSecurityChangeName("firefox-Desktop", "firefox", "Desktop", "20", ((string[])(null)));
#line hidden
        }
        
        public virtual void _05_30RecoverForgetPasswordPositive(string environment, string browser, string device, string pageLoadedInSeconds, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Sequential"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Environment", environment);
            argumentsOfScenario.Add("Browser", browser);
            argumentsOfScenario.Add("Device", device);
            argumentsOfScenario.Add("PageLoadedInSeconds", pageLoadedInSeconds);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("05_30 Recover forget password positive", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 77
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 78
 testRunner.Given("Get new user details for registration from AppSetting", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 79
 testRunner.And(string.Format("Setup the browser {0} for device {1}", browser, device), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 80
 testRunner.And(string.Format("Get and load SignUp page URL to browser from AppSetting \'URLAuth:SignUp-URL\' and " +
                            "page loaded with in {0} seconds", pageLoadedInSeconds), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 81
 testRunner.And("Accept cookie button is clicked in Static Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 82
 testRunner.And("We were able to set the Screen color mode from AppSetting", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 83
 testRunner.And("Local storage value for theme \'theme\' is \'dark\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 84
 testRunner.And("Open SignIn URL from AppSetting \'URLAuth:SignIn-URL\' and click on forget password" +
                        " button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 85
 testRunner.Then("Enter SignUp Email from NewEmailAccount from AppSetting and click send email", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 86
 testRunner.And("Validate screen navigated to Home page from AppSetting", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 87
 testRunner.And("Validate latest Forget Password Request Email from Mail box for \'Email-Box:EmailI" +
                        "d\' is \'Email-Box:Password\' from AppSetting", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 88
 testRunner.And("Open the email as HTML in new tab and click the complete your request button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 89
 testRunner.And("Goto 3rd tab to verify", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 90
 testRunner.And("Validate Forget Pass Verified Successfully page redirect to \'URLAuth:RecoverPassw" +
                        "ord-URL\' from and its content", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 91
 testRunner.And("Goto 3rd tab and close other 2 tabs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 92
 testRunner.And("Get latest password recovery key Email from Mail box for \'Email-Box:EmailId\' is \'" +
                        "Email-Box:Password\' from AppSetting", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 93
 testRunner.And("Enter password recovery key Mail to texbox and click decrypt button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 94
 testRunner.And("Validate user password wrt to recovered password and click on CopyPassword", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("05_30 Recover forget password positive, chrome-GalaxyS5", new string[] {
                "Sequential"}, SourceLine=97)]
        public virtual void _05_30RecoverForgetPasswordPositive_Chrome_GalaxyS5()
        {
#line 77
this._05_30RecoverForgetPasswordPositive("chrome-GalaxyS5", "chrome", "Galaxy S5", "15", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("05_30 Recover forget password positive, chrome-iPhoneX", new string[] {
                "Sequential"}, SourceLine=97)]
        public virtual void _05_30RecoverForgetPasswordPositive_Chrome_IPhoneX()
        {
#line 77
this._05_30RecoverForgetPasswordPositive("chrome-iPhoneX", "chrome", "iPhone X", "15", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("05_30 Recover forget password positive, chrome-iPad", new string[] {
                "Sequential"}, SourceLine=97)]
        public virtual void _05_30RecoverForgetPasswordPositive_Chrome_IPad()
        {
#line 77
this._05_30RecoverForgetPasswordPositive("chrome-iPad", "chrome", "iPad", "15", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("05_30 Recover forget password positive, chrome-Desktop", new string[] {
                "Sequential"}, SourceLine=97)]
        public virtual void _05_30RecoverForgetPasswordPositive_Chrome_Desktop()
        {
#line 77
this._05_30RecoverForgetPasswordPositive("chrome-Desktop", "chrome", "Desktop", "15", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("05_30 Recover forget password positive, firefox-GalaxyS5", new string[] {
                "Sequential"}, SourceLine=97)]
        public virtual void _05_30RecoverForgetPasswordPositive_Firefox_GalaxyS5()
        {
#line 77
this._05_30RecoverForgetPasswordPositive("firefox-GalaxyS5", "firefox", "Galaxy S5", "20", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("05_30 Recover forget password positive, firefox-Desktop", new string[] {
                "Sequential"}, SourceLine=97)]
        public virtual void _05_30RecoverForgetPasswordPositive_Firefox_Desktop()
        {
#line 77
this._05_30RecoverForgetPasswordPositive("firefox-Desktop", "firefox", "Desktop", "20", ((string[])(null)));
#line hidden
        }
    }
}
#pragma warning restore
#endregion
