// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace InfinityMatrix.Niraiya.UITests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("03_PrivacyAndSecurityScreen", Description=@"![03_PrivacyAndSecurityScreen]
Link to a feature: [PrivacyAndSecurityScreen](InfinityMatrix.Niraiya.UITests/Features/03_PrivacyAndSecurityScreen.feature)
***Further read***: **[Learn more about how to generate Living Documentation](https://docs.specflow.org/projects/specflow-livingdoc/en/latest/LivingDocGenerator/Generating-Documentation.html)**", SourceFile="Features\\03_PrivacyAndSecurity.feature", SourceLine=0)]
    public partial class _03_PrivacyAndSecurityScreenFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "03_PrivacyAndSecurity.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "03_PrivacyAndSecurityScreen", @"![03_PrivacyAndSecurityScreen]
Link to a feature: [PrivacyAndSecurityScreen](InfinityMatrix.Niraiya.UITests/Features/03_PrivacyAndSecurityScreen.feature)
***Further read***: **[Learn more about how to generate Living Documentation](https://docs.specflow.org/projects/specflow-livingdoc/en/latest/LivingDocGenerator/Generating-Documentation.html)**", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void _03_10GetPrivacyAndSecurityScreen(string environment, string browser, string device, string millisecond, string pageLoadedInSeconds, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "PrivacyAndSecurity",
                    "GetPrivacyAndSecurityScreen",
                    "Parallel"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Environment", environment);
            argumentsOfScenario.Add("Browser", browser);
            argumentsOfScenario.Add("Device", device);
            argumentsOfScenario.Add("Millisecond", millisecond);
            argumentsOfScenario.Add("PageLoadedInSeconds", pageLoadedInSeconds);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("03_10 Get PrivacyAndSecurity Screen", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 7
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
 testRunner.Given("Get PrivacyAndSecurity page URL from AppSetting", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 9
 testRunner.And(string.Format("The PrivacyAndSecurity page is loaded for browser {0} for device {1}", browser, device), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 10
 testRunner.When("Accept cookie button is clicked in PrivacyAndSecurity page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 11
 testRunner.Then(string.Format("The PrivacyAndSecurity page loaded with in {0} seconds", pageLoadedInSeconds), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 12
 testRunner.And("We were able to get PrivacyAndSecurity page total dimention", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 13
 testRunner.And("We were able to set the PrivacyAndSecurity Screen color mode from AppSetting", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 14
 testRunner.And("PrivacyAndSecurity Local storage value for theme \'theme\' is \'dark\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 15
 testRunner.And(string.Format("The PrivacyAndSecurity page is scrolled step by step to end by millisecond delay " +
                            "{0}", millisecond), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("03_10 Get PrivacyAndSecurity Screen, chrome-GalaxyS5", new string[] {
                "PrivacyAndSecurity",
                "GetPrivacyAndSecurityScreen",
                "Parallel"}, SourceLine=18)]
        public virtual void _03_10GetPrivacyAndSecurityScreen_Chrome_GalaxyS5()
        {
#line 7
this._03_10GetPrivacyAndSecurityScreen("chrome-GalaxyS5", "chrome", "Galaxy S5", "500", "10", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("03_10 Get PrivacyAndSecurity Screen, chrome-iPhoneX", new string[] {
                "PrivacyAndSecurity",
                "GetPrivacyAndSecurityScreen",
                "Parallel"}, SourceLine=18)]
        public virtual void _03_10GetPrivacyAndSecurityScreen_Chrome_IPhoneX()
        {
#line 7
this._03_10GetPrivacyAndSecurityScreen("chrome-iPhoneX", "chrome", "iPhone X", "500", "10", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("03_10 Get PrivacyAndSecurity Screen, chrome-iPad", new string[] {
                "PrivacyAndSecurity",
                "GetPrivacyAndSecurityScreen",
                "Parallel"}, SourceLine=18)]
        public virtual void _03_10GetPrivacyAndSecurityScreen_Chrome_IPad()
        {
#line 7
this._03_10GetPrivacyAndSecurityScreen("chrome-iPad", "chrome", "iPad", "500", "10", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("03_10 Get PrivacyAndSecurity Screen, chrome-Desktop", new string[] {
                "PrivacyAndSecurity",
                "GetPrivacyAndSecurityScreen",
                "Parallel"}, SourceLine=18)]
        public virtual void _03_10GetPrivacyAndSecurityScreen_Chrome_Desktop()
        {
#line 7
this._03_10GetPrivacyAndSecurityScreen("chrome-Desktop", "chrome", "Desktop", "500", "10", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("03_10 Get PrivacyAndSecurity Screen, firefox-GalaxyS5", new string[] {
                "PrivacyAndSecurity",
                "GetPrivacyAndSecurityScreen",
                "Parallel"}, SourceLine=18)]
        public virtual void _03_10GetPrivacyAndSecurityScreen_Firefox_GalaxyS5()
        {
#line 7
this._03_10GetPrivacyAndSecurityScreen("firefox-GalaxyS5", "firefox", "Galaxy S5", "200", "20", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("03_10 Get PrivacyAndSecurity Screen, firefox-Desktop", new string[] {
                "PrivacyAndSecurity",
                "GetPrivacyAndSecurityScreen",
                "Parallel"}, SourceLine=18)]
        public virtual void _03_10GetPrivacyAndSecurityScreen_Firefox_Desktop()
        {
#line 7
this._03_10GetPrivacyAndSecurityScreen("firefox-Desktop", "firefox", "Desktop", "200", "20", ((string[])(null)));
#line hidden
        }
        
        public virtual void _03_20AcceptCookieButtonForPrivacyAndSecurity(string environment, string browser, string device, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "PrivacyAndSecurity",
                    "Parallel"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Environment", environment);
            argumentsOfScenario.Add("Browser", browser);
            argumentsOfScenario.Add("Device", device);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("03_20 Accept Cookie Button for PrivacyAndSecurity", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 27
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 28
 testRunner.Given("Get PrivacyAndSecurity page URL from AppSetting", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 29
 testRunner.And(string.Format("The PrivacyAndSecurity page is loaded for browser {0} for device {1}", browser, device), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 30
 testRunner.And("Accept cookie alert is visible for first time in PrivacyAndSecurity page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 31
 testRunner.And("Accept cookie button is visible for first time in PrivacyAndSecurity page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 32
 testRunner.And("Local storage value for Accept cookie \'ApplicationStorageName_AcceptCookie\' is \'N" +
                        "o\' in PrivacyAndSecurity page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 33
 testRunner.When("Accept cookie button is clicked in PrivacyAndSecurity page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 34
 testRunner.And("Accept cookie alert should not be visisble in PrivacyAndSecurity page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 35
 testRunner.And("Accept cookie button should not be visisble in PrivacyAndSecurity page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 36
 testRunner.And("Local storage value for Accept cookie \'ApplicationStorageName_AcceptCookie\' is \'Y" +
                        "es\' in PrivacyAndSecurity page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("03_20 Accept Cookie Button for PrivacyAndSecurity, chrome-GalaxyS5", new string[] {
                "PrivacyAndSecurity",
                "Parallel"}, SourceLine=39)]
        public virtual void _03_20AcceptCookieButtonForPrivacyAndSecurity_Chrome_GalaxyS5()
        {
#line 27
this._03_20AcceptCookieButtonForPrivacyAndSecurity("chrome-GalaxyS5", "chrome", "Galaxy S5", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("03_20 Accept Cookie Button for PrivacyAndSecurity, chrome-iPhoneX", new string[] {
                "PrivacyAndSecurity",
                "Parallel"}, SourceLine=39)]
        public virtual void _03_20AcceptCookieButtonForPrivacyAndSecurity_Chrome_IPhoneX()
        {
#line 27
this._03_20AcceptCookieButtonForPrivacyAndSecurity("chrome-iPhoneX", "chrome", "iPhone X", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("03_20 Accept Cookie Button for PrivacyAndSecurity, chrome-iPad", new string[] {
                "PrivacyAndSecurity",
                "Parallel"}, SourceLine=39)]
        public virtual void _03_20AcceptCookieButtonForPrivacyAndSecurity_Chrome_IPad()
        {
#line 27
this._03_20AcceptCookieButtonForPrivacyAndSecurity("chrome-iPad", "chrome", "iPad", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("03_20 Accept Cookie Button for PrivacyAndSecurity, chrome-Desktop", new string[] {
                "PrivacyAndSecurity",
                "Parallel"}, SourceLine=39)]
        public virtual void _03_20AcceptCookieButtonForPrivacyAndSecurity_Chrome_Desktop()
        {
#line 27
this._03_20AcceptCookieButtonForPrivacyAndSecurity("chrome-Desktop", "chrome", "Desktop", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("03_20 Accept Cookie Button for PrivacyAndSecurity, firefox-GalaxyS5", new string[] {
                "PrivacyAndSecurity",
                "Parallel"}, SourceLine=39)]
        public virtual void _03_20AcceptCookieButtonForPrivacyAndSecurity_Firefox_GalaxyS5()
        {
#line 27
this._03_20AcceptCookieButtonForPrivacyAndSecurity("firefox-GalaxyS5", "firefox", "Galaxy S5", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("03_20 Accept Cookie Button for PrivacyAndSecurity, firefox-Desktop", new string[] {
                "PrivacyAndSecurity",
                "Parallel"}, SourceLine=39)]
        public virtual void _03_20AcceptCookieButtonForPrivacyAndSecurity_Firefox_Desktop()
        {
#line 27
this._03_20AcceptCookieButtonForPrivacyAndSecurity("firefox-Desktop", "firefox", "Desktop", ((string[])(null)));
#line hidden
        }
        
        public virtual void _03_30CheckPrivacyAndSecurityAccordion(string environment, string browser, string device, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "PrivacyAndSecurity",
                    "Parallel"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Environment", environment);
            argumentsOfScenario.Add("Browser", browser);
            argumentsOfScenario.Add("Device", device);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("03_30 Check PrivacyAndSecurity Accordion", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 48
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 49
 testRunner.Given("Get PrivacyAndSecurity page URL from AppSetting", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 50
 testRunner.And(string.Format("The PrivacyAndSecurity page is loaded for browser {0} for device {1}", browser, device), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 51
 testRunner.When("Accept cookie button is clicked in PrivacyAndSecurity page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 52
 testRunner.Then("We were able to set the PrivacyAndSecurity Screen color mode from AppSetting", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 53
 testRunner.And("PrivacyAndSecurity Local storage value for theme \'theme\' is \'dark\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 54
 testRunner.And("When click on Accordion Link \'Privacy&SecurityPolicy\' Page should scroll to respe" +
                        "ctive accordion and check header \'Privacy & Security Policy\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 55
 testRunner.And("When click on Accordion Link \'AboutNiraiya\' Page should scroll to respective acco" +
                        "rdion and check header \'About Niraiya\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 56
 testRunner.And("When click on Accordion Link \'SecurityAtNiraiya\' Page should scroll to respective" +
                        " accordion and check header \'Security at Niraiya\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 57
 testRunner.And("When click on Accordion Link \'PrivacyAtNiraiya\' Page should scroll to respective " +
                        "accordion and check header \'Privacy at Niraiya\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 58
 testRunner.And("When click on Accordion Link \'DataSharing\' Page should scroll to respective accor" +
                        "dion and check header \'Data sharing\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 59
 testRunner.And("When click on Accordion Link \'AdsAndTrackers\' Page should scroll to respective ac" +
                        "cordion and check header \'Ads and Trackers\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 60
 testRunner.And("When click on Accordion Link \'AccountTermination\' Page should scroll to respectiv" +
                        "e accordion and check header \'Account Termination\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("03_30 Check PrivacyAndSecurity Accordion, chrome-GalaxyS5", new string[] {
                "PrivacyAndSecurity",
                "Parallel"}, SourceLine=63)]
        public virtual void _03_30CheckPrivacyAndSecurityAccordion_Chrome_GalaxyS5()
        {
#line 48
this._03_30CheckPrivacyAndSecurityAccordion("chrome-GalaxyS5", "chrome", "Galaxy S5", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("03_30 Check PrivacyAndSecurity Accordion, chrome-iPhoneX", new string[] {
                "PrivacyAndSecurity",
                "Parallel"}, SourceLine=63)]
        public virtual void _03_30CheckPrivacyAndSecurityAccordion_Chrome_IPhoneX()
        {
#line 48
this._03_30CheckPrivacyAndSecurityAccordion("chrome-iPhoneX", "chrome", "iPhone X", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("03_30 Check PrivacyAndSecurity Accordion, chrome-iPad", new string[] {
                "PrivacyAndSecurity",
                "Parallel"}, SourceLine=63)]
        public virtual void _03_30CheckPrivacyAndSecurityAccordion_Chrome_IPad()
        {
#line 48
this._03_30CheckPrivacyAndSecurityAccordion("chrome-iPad", "chrome", "iPad", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("03_30 Check PrivacyAndSecurity Accordion, chrome-Desktop", new string[] {
                "PrivacyAndSecurity",
                "Parallel"}, SourceLine=63)]
        public virtual void _03_30CheckPrivacyAndSecurityAccordion_Chrome_Desktop()
        {
#line 48
this._03_30CheckPrivacyAndSecurityAccordion("chrome-Desktop", "chrome", "Desktop", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("03_30 Check PrivacyAndSecurity Accordion, firefox-GalaxyS5", new string[] {
                "PrivacyAndSecurity",
                "Parallel"}, SourceLine=63)]
        public virtual void _03_30CheckPrivacyAndSecurityAccordion_Firefox_GalaxyS5()
        {
#line 48
this._03_30CheckPrivacyAndSecurityAccordion("firefox-GalaxyS5", "firefox", "Galaxy S5", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("03_30 Check PrivacyAndSecurity Accordion, firefox-Desktop", new string[] {
                "PrivacyAndSecurity",
                "Parallel"}, SourceLine=63)]
        public virtual void _03_30CheckPrivacyAndSecurityAccordion_Firefox_Desktop()
        {
#line 48
this._03_30CheckPrivacyAndSecurityAccordion("firefox-Desktop", "firefox", "Desktop", ((string[])(null)));
#line hidden
        }
    }
}
#pragma warning restore
#endregion
